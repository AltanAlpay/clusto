#!/usr/bin/env python
from xml.etree import ElementTree as ET
from subprocess import Popen, PIPE
from optparse import OptionParser
from traceback import format_exc
import sys

from clusto.drivers import IPManager, PenguinServer
from clusto.scripthelpers import init_script
import clusto

sys.path.append('/var/lib/clusto')
from sysinfo import discover_hardware, update_server

def main():
    parser = OptionParser(usage='%prog <subnet>')
    options, args = parser.parse_args()

    if not args:
        parser.print_help()
        return -1

    print 'Starting nmap scan...'
    proc = Popen(['/usr/bin/nmap', '-sP', '-oX', '-', args[0]], stdout=PIPE)
    stdout, stderr = proc.communicate()
    print 'Scan complete, beginning clusto discovery'

    xml = ET.fromstring(stdout)

    for host in xml.findall('host'):
        state = host.find('status').get('state')
        if state != 'up':
            continue
        ip = host.find('address').get('addr')

        device = IPManager.get_devices(ip)
        if device:
            print '%s = %s' % (device[0].name, ip)
            continue

        print 'Inspecting', ip
        try:
            info = discover_hardware(ip)
        except:
            print 'Discovery failed:', sys.exc_info()[1]
            info = None

        if not info:
            print 'Unable to discover device', ip
            continue

        try:
            server = clusto.get_by_name(info['system'][0]['hostname'])
            if server:
                print '%s might be %s, leaving it alone' % (ip, server.name)
                continue
        except KeyboardInterrupt:
            break
        except:
            pass

        hostname = info['system'][0]['hostname']
        hostname = hostname.strip(' \r\n')
        if not hostname:
            print 'Unable to determine hostname for', ip
            continue

        try:
            print 'Creating %s (%s)' % (hostname, ip)
            clusto.begin_transaction()
            server = PenguinServer(hostname)
            print 'Updating %s' % server.name
            update_server(server, info)
            clusto.commit()
        except:
            print format_exc()
            clusto.rollback_transaction()

if __name__ == '__main__':
    init_script()
    sys.exit(main())
