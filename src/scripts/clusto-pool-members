#!usr/bin/env python
"""Return a list of servers in the given pools"""

import sys
import clusto.scripthelpers

config, logger = clusto.scripthelpers.initScript()

from clusto import *
from optparse import OptionParser

parser = OptionParser(usage="%prog [options] poolname [poolname] ...")
parser.add_option("--IPs", action="store_true", dest="IPs", default=False,
                  help="return IPs instead of entity names")
parser.add_option("--type", action="append", dest="types", default=[],
                  help="type to match against, can be listed multiple times")
#parser.add_option("-a", "--attr", dest="attrs", action="append", default=[],
#                  help="the clusto attribute to retrieve")

def main(argv):

    (opts, args) = parser.parse_args(argv)

    if not args:
        logger.error("At least one poolname must be specified")
        return 1
        
    pools = []
    for poolname in args:
        
        try:
            pool = clusto.getByName(poolname)
            if clusto.getTypeName(pool) == clusto.getTypeName(clusto.drivers.Pool):
                pools.append(pool)
            else:
                logger.error("%s is not a pool" % poolname)
                return 1
        except LookupError, x:
            logger.error("%s doesn't exist" % poolname)
            return 1

    if not opts.types:
        opts.types = ['server']

    entities = set(pools[0].contents(clustoTypes=opts.types))

    for pool in pools[1:]:
        entities.intersection_update(pool.contents(clustoTypes=opts.types))


    if opts.IPs:
        for entity in entities:
            if hasattr(entity, 'IP') and entity.IP:
                print str(entity.IP)
            else:
                print "%s has no IP" % entity.name
    else:
        for entity in entities:
            print entity.name

    return 0
    

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
