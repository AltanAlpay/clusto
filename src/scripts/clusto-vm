#!/usr/bin/env python
from clusto.scripthelpers import init_script
from clusto.drivers import XenVirtualServer, VMManager
import clusto

from IPy import IP

from optparse import OptionParser
from traceback import format_exc
import sys

def create(options, args):
    args = args[1:]
    vm = None
    if args:
        try:
            vm = clusto.get_by_name(args[0])
        except LookupError:
            pass

    if not vm:
        names = clusto.get_by_name('vmnames')
        vm = names.allocate(XenVirtualServer)
        print 'Created', vm.name

    vm.set_attr(key='system', subkey='disk', value=options.disk)
    vm.set_attr(key='system', subkey='memory', value=options.memory)
    vm.set_attr(key='system', subkey='swap', value=options.swap)
    vm.set_attr(key='system', subkey='cpucount', value=options.cpu)

    p = clusto.get_by_name('fai')
    p.insert(vm)
    p = clusto.get_by_name('virtual')
    p.insert(vm)

    ipman = clusto.get_by_name('servers-192')
    ipman.allocate(vm)

    vmman = clusto.get_by_name('xenmanager')
    if options.hypervisor:
        vmman.allocate(vm, clusto.get(options.hypervisor)[0], force=True)
    else:
        vmman.allocate(vm)

    # Generate a MAC based on IP. Serious voodoo
    intip = IP(vm.get_ips()[0]).int()
    mac = (0x0252 << 32) + intip
    macstr = ['%02x' % ((mac >> (i * 8)) & 0xFF) for i in range(5, -1, -1)]
    mac = ':'.join(macstr)
    vm.set_port_attr('nic-eth', 1, 'mac', mac)

    vm.vm_create()

def vmlist(options, args):
    if not options.csv:
        print 'Hypervisor'.ljust(20), 'VM'.ljust(20), 'Name'.ljust(20)
    vmman = clusto.get_by_name('xenmanager')
    for vm in vmman.referencers():
        host = vmman.resources(vm)[0].value
        fields = (host.get_ips()[0], vm.get_ips()[0], vm.name)
        if options.csv:
            print ','.join(fields)
        else:
            print ' '.join([x.ljust(20) for x in fields])

def delete(server):
    sys.stdout.write('Are you absolutely sure you want to delete %s (yes/no)? ' % server.name)
    sys.stdout.flush()
    try:
        line = sys.stdin.readline().strip('\r\n ')
        if line == 'yes':
            server.vm_delete()
            clusto.delete_entity(server.entity)
            return 0
        else:
            print 'Aborting'
    except KeyboardInterrupt:
        print 'Aborting'
    return -1

def main():
    parser = OptionParser(usage='%prog <action> [options]\nActions: create, delete, start, stop, reboot, list, console')
    parser.add_option('-f', '--hypervisor', dest='hypervisor', help='If creating a VM, force it to be allocated on the given hypervisor')
    parser.add_option('-d', '--disk', dest='disk', type='int', help='Disk size in GB (default: 10)', default=10)
    parser.add_option('-m', '--memory', dest='memory', type='int', help='Memory size in MB (default: 1024)', default=1024)
    parser.add_option('-s', '--swap', dest='swap', type='int', help='Swap size in MB', default=512)
    parser.add_option('-c', '--cpu', dest='cpu', type='int', help='CPU count', default=1)
    parser.add_option('-v', '--csv', dest='csv', action='store_true', help='CSV output for "list"', default=False)
    options, args = parser.parse_args()

    if not args:
        parser.print_help()
        return -1

    action = args[0]

    if action == 'create':
        return create(options, args)

    if action == 'list':
        return vmlist(options, args)

    if len(args) < 2:
        parser.print_help()
        return -1

    try:
        server = clusto.get_by_name(args[1])
    except LookupError:
        sys.stderr.write('%s does not exist.' % sys.argv[1])
        return -1

    if action == 'delete':
        return delete(server)

    if hasattr(server, 'vm_' + action):
        method = getattr(server, 'vm_' + action)
        try:
            method()
            return 0
        except:
            sys.stderr.write(str(sys.exc_info()[1]) + '\n')
            return -1
    else:
        sys.stderr.write('Unknown action: %s\n' % action)
        return -1

if __name__ == '__main__':
    init_script()
    main()
