#!/usr/bin/env python
from clusto.scripthelpers import init_script
from clusto.drivers import KVMVirtualServer
import clusto

from optparse import OptionParser
import sys

def main():
    parser = OptionParser(usage='%prog [options] (create|update|delete|start|stop|status) <server>')
    parser.add_option('-d', '--disk', dest='disk', help='Disk in GB (default: 50)', default=50, type='int')
    parser.add_option('-m', '--memory', dest='memory', help='Memory in MB (default: 1024)', default=1024, type='int')

    options, args = parser.parse_args()

    if len(args) < 1:
        parser.print_help()
        return -1

    action = args[0]

    if action != 'create':
        server = args[1]
        vm = clusto.get(server)

        if vm:
            vm = vm[0]
        else:
            sys.stderr.write('Server does not exist: %s\n' % server)
            return -1
    else:
        manager = clusto.get_by_name('kvmmanager')
        names = clusto.get_by_name('vmnames')
        ipman = clusto.get_by_name('servers-192')
        fai = clusto.get_by_name('fai')

        vm = names.allocate(KVMVirtualServer)
        print 'Created', vm.name
        ipman.allocate(vm)
        manager.allocate(vm)
        fai.insert(vm)

    actions = {
        'create': vm.kvm_create,
        'update': vm.kvm_update,
        'delete': vm.kvm_delete,
        'start': vm.kvm_start,
        'stop': vm.kvm_stop,
        'status': vm.kvm_status,
        'console': vm.kvm_console,
    }

    if not action in actions:
        sys.stderr.write('Unknown action: %s\n' % action)
        return -1

    ret = actions[action](options)
    if ret:
        print ret

    if action == 'delete':
        clusto.delete_entity(vm.entity)

if __name__ == '__main__':
    init_script()
    sys.exit(main())
