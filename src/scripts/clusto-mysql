#!/usr/bin/env python
from clusto.scripthelpers import init_script
import clusto
import sys
from optparse import OptionParser
from clusto.drivers import IPManager
import os
from StringIO import StringIO
from xml.dom.ext import PrettyPrint

class ClustoMysql(object):
    def __init__(self, options):
        self.options = options
    
    def outputs(self):
        if self.outputs == "skip":
            return
        if self.options.output == "plain":
            self._output_plain()

        if self.options.output == "csv":
            self._output_csv()

        if self.options.output == "xml":
            self._output_xml()

    def _output_xml(self):
        from xml.dom.minidom import Document
        if self.action == "show":
            xml = Document()
            db = xml.createElement("DB")
            xml.appendChild(db)
            dbpools = xml.createElement("DBPools")
            db.appendChild(dbpools)
            pools = xml.createElement("pools")
            dbpools.appendChild(pools)
            for objname, objects in self.objects.items():
                poolname = xml.createElement(objname)
                for obj in objects:
                    ip = obj.get_ips()[0]
                    port = obj.attrs(key="puppet", subkey="mysql_port", \
                        merge_container_attrs=True)[0].value
                    server_url = "%s:%s" % (ip,port)
                    mysql_password = obj.attrs(key="mycnf", subkey = "password", \
                        merge_container_attrs=True)[0].value
                    servers = xml.createElement('server')
                    poolname.appendChild(servers)
                    host = xml.createElement('host')
                    servers.appendChild(host)
                    host_name = xml.createTextNode(server_url)
                    host.appendChild(host_name)
                    user = xml.createElement('user')
                    user_name = xml.createTextNode("root")
                    user.appendChild(user_name)
                    servers.appendChild(user)
                    database = xml.createElement('database')
                    servers.appendChild(database)
                    database_val = xml.createTextNode('production')
                    database.appendChild(database_val)
                    servers.appendChild(database)
                    password = xml.createElement('password')
                    servers.appendChild(password)
                    password_val = xml.createTextNode(mysql_password)
                    password.appendChild(password_val)
                    proportion = xml.createElement('proportion')
                    servers.appendChild(proportion)
                    proportion_val = xml.createTextNode(str(obj.mysql_weight))
                    proportion.appendChild(proportion_val)
                    

                pools.appendChild(poolname)
            print toprettyxml_fixed(xml)
    
    def _output_csv(self):
        if self.action == "show":
            for objname, objects in self.objects.items():
                for obj in objects:
                    outlist = [obj.name, obj.rwpool, str(obj.mysql_weight),obj.hdtype]
                    mysql_attrs = ",".join(obj.special_mysql_attrs)
                    if mysql_attrs != []:
                        outlist.append(mysql_attrs)
                    print ",".join(outlist).rstrip(",")

        if self.action == "showattr":
            for attr in self.mysql_attrs:
                if self.options.key: 
                    if attr.subkey == self.options.key:
                        print ",".join([attr.key,attr.subkey,str(attr.value)])
                elif self.options.value:
                    if str(attr.value) == str(self.options.value):
                        print ",".join([attr.key, attr.subkey, str(attr.value)])
                else:
                    print ",".join([attr.key,attr.subkey, str(attr.value)])
                                

    def _output_plain(self):
        if self.action == "show":
            name_pad = 10
            pad = 10
            if self.options.ip == True:
                name_pad = name_pad = 25

            print "name".ljust(name_pad, ' '),"rwpool".ljust(pad, ' '),"weight".ljust(pad, ' '), \
                "hdtype".ljust(pad, ' '),"pools".ljust(pad, ' '), "special attrs".ljust(pad, ' '), "\n"
            for (objname, objects) in self.objects.items():
                for obj in objects:
                    if self.options.ip == True:
                        ip = IPManager.get_ips(obj)[0]
                        obj_name = obj.name + " (%s)" % ip
                    else:
                        obj_name = obj.name
                    print obj_name.ljust(name_pad, ' '),obj.rwpool.ljust(pad, ' '), \
                            str(obj.mysql_weight).ljust(pad, ' '), \
                        obj.hdtype.ljust(pad, ' '),obj.mysql_pools.ljust(pad, ' '), \
                                ",".join(obj.special_mysql_attrs).ljust(pad, ' ')

        if self.action == "showattr":
            pad = 10
            subkey_len = 10
            for attr in self.mysql_attrs:
                if len(attr.subkey) > subkey_len:
                    subkey_len = len(attr.subkey)
            
            for attr in self.mysql_attrs:
                if self.options.key: 
                    if attr.subkey == self.options.key:
                        print attr.key.ljust(pad, ' '), attr.subkey.ljust(subkey_len, ' '), \
                            "=", str(attr.value).ljust(20, ' ')
                elif self.options.value:
                    if str(attr.value) == str(self.options.value):
                        print attr.key.ljust(pad, ' '), attr.subkey.ljust(subkey_len, ' '), \
                            "=", str(attr.value).ljust(20, ' ')
                else:
                    print attr.key.ljust(pad, ' '), attr.subkey.ljust(subkey_len, ' '), \
                        "=", str(attr.value).ljust(20, ' ')
                                

    def showattr(self):
        # FIXME getting the object for the second time, fail
        # this time it's doing it (again) on the key of the first object
        # so it will work in the case of pools
        try:
            try:
                obj = IPManager.get_devices(self.objects.keys()[0])[0]
            except:
                pass
            try:
                obj = clusto.get_by_name(self.objects.keys()[0])  
            except:
                pass
        except:
            print "%s is not a valid object" % obj
            sys.exit(1)

        try:       
            kwargs={}
            if self.options.key:
                kwargs["subkey"] = self.options.key
            if self.options.value:
                kwargs["value"] = self.options.value
            mysqlattrs = obj.attrs(key="mysql", \
                     merge_container_attrs=self.options.merge_container_attrs, kwargs=kwargs)
            mycnfattrs = obj.attrs(key="mycnf", \
                     merge_container_attrs=self.options.merge_container_attrs, kwargs=kwargs)
            puppetattrs = []
            for subkey in self.puppetsubkeys:
                skey = obj.attrs(key="puppet", subkey=self.options.key, \
                         merge_container_attrs=self.options.merge_container_attrs)
                if skey != []:
                    puppetattrs.extend(skey)
        except:
            mysqlattrs = obj.attrs(key="mysql", \
                            merge_container_attrs=self.options.merge_container_attrs)
            mycnfattrs = obj.attrs(key="mycnf", \
                            merge_container_attrs=self.options.merge_container_attrs)
            puppetattrs = []
            for subkey in self.puppetsubkeys:
                skey = obj.attrs(key="puppet", subkey=subkey, \
                          merge_container_attrs=self.options.merge_container_attrs)
                if skey != []:
                    puppetattrs.extend(skey)
 
        self.mysql_attrs = []
        self.mysql_attrs = mysqlattrs + mycnfattrs + puppetattrs

    def show(self):
        for name, objects in self.objects.items():
            for me in objects:
                try:
                    me.mysql_weight = me.attrs(key="mysql", subkey="weight")[0].value
                except:
                    me.mysql_weight = 0

                parents = me.parents(clusto_types=['pool'])
                pls = check_pools(parents)
                pools = ""
                for p in pls:
                    pools += "%s " % p
                me.mysql_pools = pools

                if hasparent(parents, "mysql-read"):
                    me.rwpool = "read"
                elif hasparent(parents, "mysql-write"):
                    me.rwpool = "write"
                if hasparent(parents, "ssd"):
                    me.hdtype = "ssd"
                else:
                    me.hdtype = "hdd"

                special_attrs = []
                me.special_mysql_attrs = []
                if me.attrs(key="mycnf", subkey="rpl-mirror-binlog-enabled") != []:
                    me.special_mysql_attrs.append("rpl-mirror-binlog-enabled")

    def weight(self):
        if len(self.objects) > 1:
            print "can only set weight on one object at a time"
            sys.exit(1)
        me = self.objects.values()[0][0]
        if not self.options.weight:
            print "weight must be used with -w|--weight"
            sys.exit(1)

        me.set_attr(key='mysql', subkey='weight', value=self.options.weight)

        self.output = "skip"
    
    def connect(self):
        #FIXME needs to check for more than one object
        me = self.objects.values()[0][0]
        parents = me.parents(clusto_types=['pool'])
        pls = check_pools(parents)
        if len(pls) > 1 and not self.options.cluster:
            print "multiple parents, use -d"
            sys.exit(1)
        elif self.options.cluster: 
            cluster = clusto.get_by_name(self.options.cluster)  
        else:
            cluster = clusto.get_by_name(pls[0])

        port = cluster.attrs(key="puppet", subkey="mysql_port", merge_container_attrs=False)[0].value
        password = me.attrs(key="mycnf", subkey = "password", merge_container_attrs=True)[0].value
        ip = IPManager.get_ips(me)[0]
        
        if self.options.user:
            username = self.options.user
        else:
            username = "root"
        if self.options.db:
            db = self.options.db
        else:
            db = ""

        cmd = "mysql --user %s --host %s --port %s -p%s %s" % (username,ip,port,password,db)
        os.system(cmd)
        self.output = "skip"

def check_pools(parents):
    pools = []
    for p in parents:
        try:
            pool = p.attrs(key="puppet", subkey="mysql_cluster_id")[0].value
            pools.append(pool)
        except:
            pass
    return pools

def _get_objects(objs):
    objects = []
    try:
        try:
            obj = IPManager.get_devices(objs)[0]
        except:
            pass
        try:
            obj = clusto.get_by_name(objs)  
        except:
            pass
    except:
        print "%s is not a valid object" % obj
        sys.exit(1)

    if obj._clusto_type == "server":
        #FIXME  pool objects need to be checked, too
        parents = obj.parents(clusto_types=['pool'])
        if not hasparent(parents, "mysql-read") and not \
                                    hasparent(parents, "mysql-write"):
            print "%s is not in \"mysql-read\" or \"mysql-write\" pools" % obj.name
            sys.exit(1)
        objects.append(obj)
        return(objects)
    elif obj._clusto_type == "pool":
        return(obj.contents())
    else:
        print "%s is not a database pool or server" % me.name
        sys.exit(1)

    return objects

def hasparent(parents, pool):
    for p in parents:
        if p.name == pool:
            return True
    return False

def toprettyxml_fixed (node, encoding='utf-8'):
    tmpStream = StringIO()
    PrettyPrint(node, stream=tmpStream, encoding=encoding)
    return tmpStream.getvalue()

def main():
    parser = OptionParser(usage="usage: %prog (show|showattr|weight|connect) object[,object...] args")
    parser.add_option("-w", "--weight", dest="weight", help='used with weight')
    parser.add_option('-o', '--output', dest='output', default="plain", \
                      help='use with show|showattr. can be xml, csv or plain (default)')
    parser.add_option("-c", "--cluster", dest="cluster", \
                        help='use with connect to connect to particular instance')
    parser.add_option("-k", "--key", dest="key", \
                        help='use with showattr to filter output on a given key')
    parser.add_option("-v", "--value", dest="value", \
                        help='use with showattr to filter output on a given value')
    parser.add_option("-m", "--merge", dest="merge_container_attrs", action='store_true', 
                        help='use with showattr to merge attributes with vertical objects')
    parser.add_option("-i", "--ip", dest="ip",  action='store_true', 
                        help='use with show to display ip addresses')
    parser.add_option("-u", "--user", dest="user", 
                        help='use with connect to specify which user to connect with')
    parser.add_option("-d", "--db", dest="db", 
                        help='use with connect to specify which database to use')

    (options, args) = parser.parse_args(sys.argv[1:]) 

    if len(args) <> 2:
        parser.print_help()
        sys.exit(0)

    action, object  = args[:2]
    action = action.lower()
    cmysql = ClustoMysql(options)
    cmysql.action = action

    #speical puppet subkeys to get attributes for showattr
    cmysql.puppetsubkeys = ["mysql_cluster_id", "mysql_port", "class"]

    if "," in object:
        _objects = object.split(",")
    else:
        _objects = [object]

    cmysql.objects = {} 
    for ob in _objects:
        objs = _get_objects(ob)
        cmysql.objects[ob] = objs

    #try:
    meth = cmysql.__getattribute__(action)
    meth()
    #except:
    #    print "Method %s doesn't exist (or it's private)" % action
    #    parser.print_usage()
    
    cmysql.outputs()

if __name__ == '__main__':
    init_script()
    sys.exit(main())
