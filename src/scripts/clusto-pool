#!/usr/bin/env python
from clusto.scripthelpers import init_script
from clusto.drivers import Pool
import clusto

from optparse import OptionParser
import sys

def main():
    parser = OptionParser(usage='Usage: %prog (create|delete|insert|remove|show) <pool> [objects...]')
    options, args = parser.parse_args()

    if len(args) == 2 and args[0] == 'show':
        try:
            obj = clusto.get_by_name(args[1])
        except LookupError:
            sys.stderr.write('Object %s does not exist!\n' % args[1])
            return -1
        print '\n'.join([x.name for x in obj.contents()]).strip('\n')
        return 0

    if len(args) < 2:
        parser.print_help()
        return -1

    action, pool = args[:2]
    objects = args[2:]

    if action == 'create':
        p = Pool(pool)
        return 0

    try:
        pool = clusto.get_by_name(pool)
    except LookupError:
        sys.stderr.write('No pool named %s\n' % pool)
        return -1

    if action == 'delete':
        sys.stdout.write('Are you sure you want to delete the pool %s (yes/no)? ' % pool.name)
        answer = sys.stdin.readline()
        if answer.strip('\r\n ') == 'yes':
            clusto.delete_entity(pool.entity)
            return 0
        else:
            sys.stderr.write('Aborted\n')
            return 0

    if action == 'insert':
        for obj in objects:
            try:
                obj = clusto.get_by_name(obj)
            except LookupError:
                sys.stderr.write('%s does not exist\n' % obj)
                continue
            if obj in pool.contents():
                sys.stderr.write('%s is already in %s\n' % (obj.name, pool.name))
                continue
            pool.insert(obj)
        return 0

    if action == 'remove':
        for obj in objects:
            try:
                obj = clusto.get_by_name(obj)
            except LookupError:
                sys.stderr.write('%s does not exist\n' % obj)
                continue
            if not obj in pool.contents():
                sys.stderr.write('%s is not in %s\n' % (obj.name, pool.name))
                continue
            pool.remove(obj)
        return 0

    sys.stderr.write('Unknown action %s\n' % action)
    return -1

if __name__ == '__main__':
    init_script()
    sys.exit(main())
